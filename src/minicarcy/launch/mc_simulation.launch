<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="robot_name" default="minicarcy" />
     <arg name="cylinder_name" default="cy" />
    <arg name="controller_type" default="2D" /> <!-- 2D, 3D, drive -->
    <arg name="motors_controller_type" default="EffortJointInterface" /> 
    <arg name="imu_update_rate" default="200" />
    <arg name="control_period" default="0.001" />
    <arg name="ground_truth" default="True" />
    
   <!--  Robots start position:-->
   <arg name="robot_x_pos" default="0.0" />
   <arg name="robot_y_pos" default="0.0" />
   <arg name="robot_z_pos" default="0.273" />
   <arg name="cylinder_x_pos" default="0.0" />
   <arg name="cylinder_y_pos" default="0.0" />
   <arg name="cylinder_z_pos" default="0.1" />

   <!-- start Gazebo -->
   <!-- rosservice call unpause gazebo: rosservice call gazebo/unpause_physics -->
   <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find minicarcy)/worlds/empty.world" />
      <arg name="paused" value="True" />
      <arg name="use_sim_time" value="True" /> <!-- Tells ROS nodes asking for time to get the Gazebo-published simulation time, published over the ROS topic /clock (default true) -->
      <arg name="gui" value="True" />
      <arg name="headless" value="False" />
      <arg name="debug" value="False" />
   </include>

   <group ns="$(arg robot_name)">
      <!-- yooooooooooooooooooo  -->
      <!-- load robot_description -->
      <include file="$(find minicarcy)/launch/minicarcy_description.launch">
         <arg name="robot_name" value="$(arg robot_name)" />
         <arg name="ground_truth" value="$(arg ground_truth)" />
         <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
         <arg name="imu_update_rate" value="$(arg imu_update_rate)"/>
         <arg name="control_period" value="$(arg control_period)"/>
      </include>
      <!-- robot spawner -->
      <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg robot_name) -param robot_description -x $(arg robot_x_pos)   -y $(arg robot_y_pos) -z $(arg robot_z_pos)" />


      <!-- load controllers -->
      <group ns="joints">
      <!-- yooooooooooooooooooo  -->
      <include file="$(find minicarcy)/launch/minicarcy_description.launch">
         <arg name="robot_name" value="$(arg robot_name)" />
         <arg name="ground_truth" value="$(arg ground_truth)" />
         <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
         <arg name="imu_update_rate" value="$(arg imu_update_rate)"/>
         <arg name="control_period" value="$(arg control_period)"/>
      </include>

      <include file="$(find minicarcy)/launch/start_wheel_controllers.launch">
          <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
      </include>

      <!-- -->
      <include file="$(find minicarcy)/launch/start_joint_state_controller.launch">
          <arg name="publish_rate" value="100"/>
      </include>
      </group>

      <!-- tf publisher -->
      <remap from="joint_states" to="joints/joint_states" />
      <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"    output="screen">
         <param name="tf_prefix" type="string" value="$(arg robot_name)" if="False" /> <!-- False use no multi_robot -->
      </node>
      </group>
   <group ns="$(arg cylinder_name)">
      <!-- yooooooooooooooooooo  -->
      <!-- load cylinder_description -->
      <include file="$(find minicarcy)/launch/cylinder_description.launch">
         <arg name="robot_name" value="$(arg cylinder_name)" />
         <arg name="ground_truth" value="$(arg ground_truth)" />
      </include>
      <!-- robot spawner -->
      <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="file $(find minicarcy)/urdf/cy.urdf -urdf -model $(arg cylinder_name) -param robot_description -x $(arg cylinder_x_pos)   -y $(arg cylinder_y_pos) -z $(arg cylinder_z_pos)" />
    </group>
    <!-- transform ground truth pose to tf -> for world transformation FOR THE BALL required for rviz tf -->
    <node name="odom_to_tf_cylinder" pkg="message_to_tf" type="message_to_tf">
      <param name="odometry_topic" type="string" value="/gazebo/$(arg cylinder_name)/odom" />
      <param name="child_frame_id" type="string" value="cy_link" />
    </node>
    <!-- transform ground truth pose to tf -> for world transformation required for rviz tf-->
    <node name="odom_to_tf_robot" pkg="message_to_tf" type="message_to_tf">
      <param name="odometry_topic" type="string" value="/gazebo/$(arg robot_name)/odom" />
      <param name="child_frame_id" type="string" value="base_link" />
    </node>

    <!-- start controller -->
    <include file="$(find minicarcy)/launch/start_control_node.launch">
      <arg name="controller_type" value="$(arg controller_type)" />
      <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
    </include>

</launch>

